Sources:

        -   "Design Patterns" book
        -   https://stackoverflow.com/questions/3541383/undo-redo-implementation

Things that can be helds as state:

    -   Tracks
        -   Track parameters
            -   Notes and events
            -   Triggers
            -   Saveable settings (see sequence.hpp) including buss and
                channel.
        -   Notes and events
            -   One added (recorded/painted) or deleted note
            -   Set of notes/events added (delimited by pause/duration or stop).
            -   Set of notes/events deleted.
            -   Set of notes/events modified (LFO, Pattern-fix, etc.).
                -   Set of notes/events moved.
                -   Set of notes/events quantized.
                -   Set of notes/events randomized.
                -   Set of notes/events adjusted.
        -   Triggers
            -   Adding
            -   Deleting
            -   Transposing
    -   Configuration
        -   rc settings
        -   usr settings
        -   ctrl settings.
        -   playlist settings.
        -   mutes settings.
        -   sets settings.
        -   Things we might like to save:
            -   Snap values
            -   Zoom values
            -   Song transpose
            -   Song L/R markers and looping mode
            -   Global PPQN (already saved?) and BPM
            -   Global output bus
            -   Global beats and beat width.
            -   Default pattern length
            -   Default chords 
            -   Song record mode
            -   Recording velocity
            -   H:M:S vs B:B:T mode

Undo/Redo history:

    -   Two stacks (note we have two vectors in performer).
        -   For objects that can be undone
        -   For objects that can be redone
    -   Maximum number of undoes allowed (e.g. 32)
    -   After an undo, the redo stack must be cleared.
    -   When undo stack is empty, modification must turn off unless the
        number of undos exceeds the stack size.
    -   Rather than two stacks, use a history list.

Design patterns: see MEMENTO page 283; history list pag 62;

Originator:

    -   Creates a memento containing a snapshot of its internal state
    -   Uses the memento to restore the state
    -   Also called the "ConstraintSolver".

Caretaker:

    -   Responsible fo memento's safe-keeping
    -   Never operates on, modifies, or examines the memento's contents.
    -   Also called the "Undo Mechanism"

Memento:

    -   Store internal state of the Originator
    -   Protects access from those outside the Originator
    -   Two interfaces
        -   Caretaker's narrow interface to Memento. It only passes the
            Memento to other objects.
        -   Originator's wide interface. The Originator can create and
            use later the contents of the Memento. Ideally, only the
            Originator creating the Memento should get wide access.
    -   Also called the "SolverState".

