# Sample "session" file.

# session-path represents the desired session directory. If empty, it is
# simply the application's configuration directory as returned by
# cfg::get_home_cfg_directory() [e.g. "~/.config/seq66v2"].  The caller can
# relocate all other application directories and files to a totally different
# directory by specifying a full path. Or the caller can specify a single
# sub-directory name, whose parent directory is ~/.config/seq66v2".

[Cfg66]

config-type = "session"                     # session configuration file
quiet = false                               # disable startup error prompts
session-path = "/home/user/MidiProjects"    # or "/home/user/.config/seq66v2"
verbose = false                             # show informational messages
version = 0                                 # configuration file version

# [comments] holds user documentation for this file.

[comments]

This file is a sample for reference as we build the Cfg66 session management
scheme.

# 'auto-save-rc' sets automatic saving of the running configuration
# 'rc' and other files.

[auto-option-save]

auto-save-cfg = true

# Specifies the location and main configuration file for an application.
#
# The section name describes the type of file. It is used for path lookups. It
# will also be used as the extension if "ext" is blank.
#
# The possible kinds of values for "directory":
#
#   -   Empty (""). The session-path defined above is used.
#   -   Plain name (e.g. "rc" or "cfg"). The directory name noted above
#       is appended with "/name" and is used as the configuration directory.
#   -   Absolute path.  Can place the configuration directory basically
#       anywhere.
#   -   Session manager directory.  In this case, the session-path
#       is specified by the session manager, and all other directories are
#       relative to that directory.
#
# The possible kinds of values for "file-base":
#
#   -   Empty. The "file-base" is the app-name (no extension).
#   -   Name. The "file-base" is given as is.  No extension is needed; the
#       "ext" value will be appended anyway.

[cfg]

config = "cfg"                              # default config file storage
data = "data"                               # default data directory
midi = "midi"                               # additional data directory
audio = "audio"                             # additional data directory
home = ""                                   # needed?

[session]

active = true
directory = "cfg"                           # "rc" or "cfg" if desired
file-base = "cfg66"                         # $home/cfg/cfg66.sessions
ext = ".sessions"                           # note the extra 's'

[rc]

active = true
directory = "cfg"                           # "rc" or "cfg" if desired
file-base = ""
ext = ".rc"

[log]

active = true
directory = "logs"                          # log files, summaries, etc.
file-base = ""                              # for main log only
ext = ".log"

# An example from the Seq66 application.  This same file will be present
# in Seq66v2.

[usr]

active = true
directory = ""
file-base = ""
ext = ".usr"

# Provides a flag and play-list file.

[playlist]

active = false
directory = ""
file-base = ""
ext = ".playlist"

# Provides a flag and file-base for note-mapping. Should we call it "[drums]?

[note-mapper]

active = false
directory = ""
file-base = ""
ext = ".drums"

# Provides a flag and a file-base to allow modifying the palette.

[mute-groups]

active = false
directory = ""
file-base = ""
ext = ".mutes"

[midi-control]

active = false
directory = ""
file-base = ""
ext = ".ctrl"

# Provides a flag and a file-base to allow modifying the palette.

[palette]

active = false
directory = ""
file-base = ""
ext = ".palette"

# Provides a flag and a file-base to allow modifying the palette.

[keymap]

active = false
directory = ""
file-base = ""
ext = ".keymap"

# End of /home/user/.config/seq66v2/seq66v2.session
#
# vim: sw=4 ts=4 wm=4 et ft=dosini
