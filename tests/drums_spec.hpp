#if ! defined CFG66_CFG_DRUMS_SPEC_HPP
#define CFG66_CFG_DRUMS_SPEC_HPP

/*
 *  This file is part of cfg66.
 *
 *  cfg66 is free software; you can redistribute it and/or modify it under the
 *  terms of the GNU General Public License as published by the Free Software
 *  Foundation; either version 2 of the License, or (at your option) any later
 *  version.
 *
 *  cfg66 is distributed in the hope that it will be useful, but WITHOUT ANY
 *  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 *  details.
 *
 *  You should have received a copy of the GNU General Public License along
 *  with cfg66; if not, write to the Free Software Foundation, Inc., 59 Temple
 *  Place, Suite 330, Boston, MA  02111-1307  USA
 */

/**
 * \file          drums_spec.hpp
 *
 *      Provides a way to hold the Seq66(v2) 'drums' options.
 *
 * \library       cfg66
 * \author        Chris Ahlstrom
 * \date          2023-08-06
 * \updates       2023-08-08
 * \license       See above.
 *
 */

#include "cfg/inisections.hpp"          /* cfg::inisections class           */

/*
 * Do not document the namespace; it breaks Doxygen.
 */

namespace cfg
{

const std::string drums_extension{"drums"};

/*------------------------------------------------------------------------
 * 'drums' file
 *------------------------------------------------------------------------*/

inisection::specification drums_flag_data
{
    "[notemap-flags]",
    {
"Drum/note-mapping configuration, stored in the HOME configuration directory.\n"
"To use this file, add this file-name to '[note-mapper]' section of the\n"
"'session' file. There's no user-interface for this file. The main values\n"
"are:\n"
"\n"
"    map-type: drum, patch, or multi; indicates the mapping to do.\n"
"    gm-channel: Indicates the channel (1-16) applied to converted notes.\n"
"    reverse: true or false; map in the opposite direction if true.\n"
    },
    {
        {
            "map-type",
            {
                options::code_null, "string", options::disabled,
                "multi", "", false, false,
                "The items to be mapped.", false
            }
        },
        {
            "gm-channel",
            {
                options::code_null, "integer", options::disabled,
                "1<=1<=16", "", false, false,
                "The channel to be applied.", false
            }
        },
        {
            "reverse",
            {
                options::code_null, "boolean", options::disabled,
                "false", "", false, false,
                "Reverse the mappings.", false
            }
        }
    }
};

inisection::specification drums_section_data
{
    "[Drum %d]",
    {
        ""
    },
    {
        {
            "dev-name",
            {
                options::code_null, "string", options::disabled,
                "", "", false, false,
                "The name of the drum note for the non-GM device.", false
            }
        },
        {
            "gm-name",
            {
                options::code_null, "string", options::disabled,
                "", "", false, false,
                "The General MIDI name of the drum note.", false
            }
        },
        {
            "dev-note",
            {
                options::code_null, "integer", options::disabled,
                "0<=0<=127", "", false, false,
                "The note number in the non-GM device.", false
            }
        },
        {
            "gm-note",
            {
                options::code_null, "integer", options::disabled,
                "0<=0<=127", "", false, false,
                "The General MIDI note number.", false
            }
        }
    }
};

/*------------------------------------------------------------------------
 * All sections of the 'drums' inifile
 *------------------------------------------------------------------------*/

inisection::specification drums_comments = inifile_comment_data;

inifile::specification drums_data
{
    "drums",        /* the file extension for any 'drums' file.             */
    "",             /* use value from appinfo's get_home_cfg_directory()    */
    "",             /* use value derived from appinfo's get_home_cfg_file() */
    "This file resembles files generated by 'midicvtpp', modified:\n"
    "\n"
    "    midicvtpp --csv-drum GM_DD-11_Drums.csv --output ddrums.ini\n"
    "\n"
    "This file can convert the percussion of non-GM devices to GM, as closely\n"
    "as possible. Although it is for drums, it can be used for other\n"
    "note-mappings."
    "\n"
    "The drum section:\n"
    "\n"
    " [Drum 35].  Marks a GM drum-change section, one per instrument.\n"
    "\n"
    " gm-name    GM name for the drum assigned to the input note.\n"
    " gm-note    Input note number, same as the section number.\n"
    " dev-name   The device's name for the drum.\n"
    " dev-note   GM MIDI note whose GM sound best matches the sound of\n"
    "            dev-name.  The gm-note value is converted to the dev-note\n"
    "            value, unless reverse mapping is activated. The actual GM\n"
    "            drum sound might not match what the MIDI hardware puts out.\n"
    ,
    {
        std::ref(inifile_cfg66_data),   // std::ref(drums_cfg66_data),
        std::ref(drums_comments),
        std::ref(drums_flag_data),
        std::ref(drums_section_data)
    }
};

}           // namespace cfg

#endif      // CFG66_CFG_DRUMS_SPEC_HPP

/*
* drums_spec.hpp
*
* vim: sw=4 ts=4 wm=4 et ft=cpp
*/

